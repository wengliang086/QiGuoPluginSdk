/*      */ package com.kding.core.plugin.utils;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ final class NamespaceStack
/*      */ {
/*      */   private int[] m_data;
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   private int m_dataLength;
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   private int m_count;
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   private int m_depth;
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public NamespaceStack()
/*      */   {
/* 1062 */     this.m_data = new int[32];
/*      */   }
/*      */   
/*      */   public final void reset() {
/* 1066 */     this.m_dataLength = 0;
/* 1067 */     this.m_count = 0;
/* 1068 */     this.m_depth = 0;
/*      */   }
/*      */   
/*      */   public final int getTotalCount()
/*      */   {
/* 1073 */     return this.m_count;
/*      */   }
/*      */   
/*      */   public final int getCurrentCount() {
/* 1077 */     if (this.m_dataLength == 0) {
/* 1078 */       return 0;
/*      */     }
/* 1080 */     int offset = this.m_dataLength - 1;
/* 1081 */     return this.m_data[offset];
/*      */   }
/*      */   
/*      */   public final int getAccumulatedCount(int depth) {
/* 1085 */     if ((this.m_dataLength == 0) || (depth < 0)) {
/* 1086 */       return 0;
/*      */     }
/* 1088 */     if (depth > this.m_depth) {
/* 1089 */       depth = this.m_depth;
/*      */     }
/* 1091 */     int accumulatedCount = 0;
/* 1092 */     int offset = 0;
/* 1093 */     for (; depth != 0; depth--) {
/* 1094 */       int count = this.m_data[offset];
/* 1095 */       accumulatedCount += count;
/* 1096 */       offset += 2 + count * 2;
/*      */     }
/* 1098 */     return accumulatedCount;
/*      */   }
/*      */   
/*      */   public final void push(int prefix, int uri) {
/* 1102 */     if (this.m_depth == 0) {
/* 1103 */       increaseDepth();
/*      */     }
/* 1105 */     ensureDataCapacity(2);
/* 1106 */     int offset = this.m_dataLength - 1;
/* 1107 */     int count = this.m_data[offset];
/* 1108 */     this.m_data[(offset - 1 - count * 2)] = (count + 1);
/* 1109 */     this.m_data[offset] = prefix;
/* 1110 */     this.m_data[(offset + 1)] = uri;
/* 1111 */     this.m_data[(offset + 2)] = (count + 1);
/* 1112 */     this.m_dataLength += 2;
/* 1113 */     this.m_count += 1;
/*      */   }
/*      */   
/*      */   public final boolean pop(int prefix, int uri)
/*      */   {
/* 1118 */     if (this.m_dataLength == 0) {
/* 1119 */       return false;
/*      */     }
/* 1121 */     int offset = this.m_dataLength - 1;
/* 1122 */     int count = this.m_data[offset];
/* 1123 */     int i = 0; for (int o = offset - 2; i != count; o -= 2) {
/* 1124 */       if ((this.m_data[o] == prefix) && (this.m_data[(o + 1)] == uri))
/*      */       {
/*      */ 
/* 1127 */         count--;
/* 1128 */         if (i == 0) {
/* 1129 */           this.m_data[o] = count;
/* 1130 */           o -= 1 + count * 2;
/* 1131 */           this.m_data[o] = count;
/*      */         } else {
/* 1133 */           this.m_data[offset] = count;
/* 1134 */           offset -= 3 + count * 2;
/* 1135 */           this.m_data[offset] = count;
/* 1136 */           System.arraycopy(this.m_data, o + 2, this.m_data, o, this.m_dataLength - o);
/*      */         }
/* 1138 */         this.m_dataLength -= 2;
/* 1139 */         this.m_count -= 1;
/* 1140 */         return true;
/*      */       }
/* 1123 */       i++;
/*      */     }
/*      */     
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/* 1142 */     return false;
/*      */   }
/*      */   
/*      */   public final boolean pop() {
/* 1146 */     if (this.m_dataLength == 0) {
/* 1147 */       return false;
/*      */     }
/* 1149 */     int offset = this.m_dataLength - 1;
/* 1150 */     int count = this.m_data[offset];
/* 1151 */     if (count == 0) {
/* 1152 */       return false;
/*      */     }
/* 1154 */     count--;
/* 1155 */     offset -= 2;
/* 1156 */     this.m_data[offset] = count;
/* 1157 */     offset -= 1 + count * 2;
/* 1158 */     this.m_data[offset] = count;
/* 1159 */     this.m_dataLength -= 2;
/* 1160 */     this.m_count -= 1;
/* 1161 */     return true;
/*      */   }
/*      */   
/*      */   public final int getPrefix(int index) {
/* 1165 */     return get(index, true);
/*      */   }
/*      */   
/*      */   public final int getUri(int index) {
/* 1169 */     return get(index, false);
/*      */   }
/*      */   
/*      */   public final int findPrefix(int uri) {
/* 1173 */     return find(uri, false);
/*      */   }
/*      */   
/*      */   public final int findUri(int prefix)
/*      */   {
/* 1178 */     return find(prefix, true);
/*      */   }
/*      */   
/*      */   public final int getDepth() {
/* 1182 */     return this.m_depth;
/*      */   }
/*      */   
/*      */   public final void increaseDepth() {
/* 1186 */     ensureDataCapacity(2);
/* 1187 */     int offset = this.m_dataLength;
/* 1188 */     this.m_data[offset] = 0;
/* 1189 */     this.m_data[(offset + 1)] = 0;
/* 1190 */     this.m_dataLength += 2;
/* 1191 */     this.m_depth += 1;
/*      */   }
/*      */   
/*      */   public final void decreaseDepth() {
/* 1195 */     if (this.m_dataLength == 0) {
/* 1196 */       return;
/*      */     }
/* 1198 */     int offset = this.m_dataLength - 1;
/* 1199 */     int count = this.m_data[offset];
/* 1200 */     if (offset - 1 - count * 2 == 0) {
/* 1201 */       return;
/*      */     }
/* 1203 */     this.m_dataLength -= 2 + count * 2;
/* 1204 */     this.m_count -= count;
/* 1205 */     this.m_depth -= 1;
/*      */   }
/*      */   
/*      */   private void ensureDataCapacity(int capacity) {
/* 1209 */     int available = this.m_data.length - this.m_dataLength;
/* 1210 */     if (available > capacity) {
/* 1211 */       return;
/*      */     }
/* 1213 */     int newLength = (this.m_data.length + available) * 2;
/* 1214 */     int[] newData = new int[newLength];
/* 1215 */     System.arraycopy(this.m_data, 0, newData, 0, this.m_dataLength);
/* 1216 */     this.m_data = newData;
/*      */   }
/*      */   
/*      */   private final int find(int prefixOrUri, boolean prefix) {
/* 1220 */     if (this.m_dataLength == 0) {
/* 1221 */       return -1;
/*      */     }
/* 1223 */     int offset = this.m_dataLength - 1;
/* 1224 */     for (int i = this.m_depth; i != 0; i--) {
/* 1225 */       int count = this.m_data[offset];
/* 1226 */       offset -= 2;
/* 1227 */       for (; count != 0; count--) {
/* 1228 */         if (prefix) {
/* 1229 */           if (this.m_data[offset] == prefixOrUri) {
/* 1230 */             return this.m_data[(offset + 1)];
/*      */           }
/*      */         }
/* 1233 */         else if (this.m_data[(offset + 1)] == prefixOrUri) {
/* 1234 */           return this.m_data[offset];
/*      */         }
/*      */         
/* 1237 */         offset -= 2;
/*      */       }
/*      */     }
/* 1240 */     return -1;
/*      */   }
/*      */   
/*      */   private final int get(int index, boolean prefix) {
/* 1244 */     if ((this.m_dataLength == 0) || (index < 0)) {
/* 1245 */       return -1;
/*      */     }
/* 1247 */     int offset = 0;
/* 1248 */     for (int i = this.m_depth; i != 0; i--) {
/* 1249 */       int count = this.m_data[offset];
/* 1250 */       if (index >= count) {
/* 1251 */         index -= count;
/* 1252 */         offset += 2 + count * 2;
/*      */       }
/*      */       else {
/* 1255 */         offset += 1 + index * 2;
/* 1256 */         if (!prefix) {
/* 1257 */           offset++;
/*      */         }
/* 1259 */         return this.m_data[offset];
/*      */       } }
/* 1261 */     return -1;
/*      */   }
/*      */ }